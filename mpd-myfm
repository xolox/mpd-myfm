#!/usr/bin/env python

#Import with statement from __future__ to support python 2.5
from __future__ import with_statement
import grp
import logging # Chicken & egg problem :x
import optparse
import os
import pwd
import re
import socket
import sys
import threading
import time

def main(options, parser):

   logger = createlog(options)
   logger.debug('logging Level = %i', options.verbosity)
   if options.pidfile:
      if os.path.exists(options.pidfile):
         try:
            pidfile = open(options.pidfile, 'rw')
            pid = pidfile.read(8)
            if os.path.exists('/proc/%s' % pid) and pid != '':
               logger.warning('The pidfile (%s) points to an existing process, mpd-myfm is probably already running.', options.pidfile)
               if options.daemonize:
                  logger.warning('If you are sure mpd-myfm is not running you can remove %s and run mpd-myfm again.', options.pidfile)
                  raise RuntimeError
               else:
                  logger.warning('Not using pidfile, since it is already in use by another process')
                  options.pidfile = ''
            else:
               logger.warning('reusing stale pidfile (%s)', options.pidfile)
               pidfile = open(options.pidfile,'w')
               pidfile.write(str(os.getpid()))
         except OSError, error:
            logger.error('An error occurred while creating the pidfile: %s', error)
      else:
         pidfile = open(options.pidfile,'w')
         pidfile.write(str(os.getpid()))
         # We close pidfile handle later so the chown below doesn't fail.

   if options.effectivegroup and os.getuid() == 0:
      gid = grp.getgrnam(options.effectivegroup)[2]
      try: os.chown(options.pidfile, -1, gid)
      except OSError: logger.error('Could not change group of %s.', options.pidfile)
      try: os.setgid(gid)
      except OSError:
         logger.error('Could not set group to %s.', options.effectivegroup)
         raise RuntimeError
   if options.effectiveuser and os.getuid() == 0:
      uid = pwd.getpwnam(options.effectiveuser)[2]
      try: os.chown(options.pidfile, uid, -1)
      except OSError: logger.error('Could not change ownership of %s.', options.pidfile)
      try: os.setuid(uid)
      except OSError:
         logger.error('Could not set user to %s.', options.effectiveuser)
         raise RuntimeError

   # Don't close the PID file unless it was actually opened!
   if options.pidfile:
      pidfile.close()

   # Import local modules here so that any errors get logged to the log file.
   import myfm
   import mpd

   # Initialize the play list generator.
   myfm = myfm.MyFM(logger=logger)

   # Create locker object for communication to the mpd server.
   comlock = threading.RLock()
   client = mpd.MPDClient()
   if not connect(client, options.hostname, options.portnr, options.passwd):
      logger.error("Failed to connect to MPD server at `%s' on port `%i'", options.hostname, options.portnr)
      if not options.daemonize:
         parser.print_help()
         sys.exit(1)
      else:
         # If daemonized we should not exit on any connection failure.
         while not connect(client, options.hostname, options.portnr, options.passwd): sleep(10, logger)
   else:
      logger.info("Building the Music Player Daemon library index")
      # Create an index from the user's library.
      myfm.index.load(getLibraryInfo(client))
      # Start lirc thread if enabled.
      if options.lircenabled:
         irrec = lircstart(options, client, myfm, comlock, logger)
      else: irrec = False

      # Get the user's loved & banned tracks from Last.fm?
      if options.lastfmaccount:
         logger.info("Scraping last.fm for user's loved and banned tracks")
         myfm.getLovedTracks(options.lastfmaccount)

      logger.info("Done... Now starting main program loop.")
      while 1:
         try:
            if irrec:
               irrec = lirccheck(irrec, client, options, myfm, comlock, logger)
            comlock.acquire()
            if clientenabled(client.status(), options.songsleft, logger):
               for filename in myfm.getNextTracks(client.playlist()):
                  client.add(filename)
            comlock.release()
            # Sleep for a while before trying to update again.
            sleep(options.updatetime, logger)
         except (socket.error, mpd.ConnectionError), msgconerrer:
            # Let the user know what's going on.
            logger.error('Lost connection to mpd server? (%s)', msgconerrer)
            # Try to close the connection in case it's still open.
            try: client.disconnect()
            except: pass
            # Sleep for a while before trying to reconnect.
            sleep(options.reconnecttime, logger)
            # Loop until we're connected to MPD again.
            while not connect(client, options.hostname, options.portnr, options.passwd):
               sleep(options.reconnecttime, logger)
         except (SystemExit, KeyboardInterrupt):
            logger.info('mpd-myfm is stopping transmission.')
            quit(options, irrec, logger)
            sys.exit(0)
         except:
            # TODO: get track that caused crash in error log.
            logger.error('mpd-myfm has encountered a problem and will now exit.')
            quit(options, irrec, logger)
            # We raise a RuntimeError here in stead of sys.exit() otherwise the
            # stack gets printed by both the logging module and by the standard
            # python stack tracer.
            # Be aware that since this stack gets printed from within the main()
            # function the main() call will be omitted in the stack trace.
            raise RuntimeError

def quit(options, irrec, logger): # {{{1
   options.lircenabled = False
   if irrec:
      irrec.join()

def clientenabled(status, songsleft, logger): # {{{1
   if int(status['playlistlength']) == 0:
      logger.log(7, "Doing nothing because play list is empty.")
      return False
   if int(status['random']) != 0:
      logger.log(7, "Doing nothing because random is enabled.")
      return False
   if int(status['repeat']) != 0:
      logger.log(7, "Doing nothing because repeat is enabled.")
      return False
   if status.has_key('song') and int(status['playlistlength']) > (int(status['song']) + songsleft) \
         or not status.has_key('song') and int(status['playlistlength']) >= songsleft:
      logger.log(7, "Doing nothing because the end of the play list hasn't been reached.")
      return False
   return True

# Lirc support. {{{1

class IRRec(threading.Thread): # {{{2
   """Threading class for polling lircd, it will set a class instance of 'keypressed'."""
   keypressed = []
   def __init__(self, client, options, myfm, comlock, logger):
      threading.Thread.__init__(self)
      self.client = client
      self.options = options
      self.myfm = myfm
      self.logger = logger
      self.comlock = comlock

   def run(self): # {{{3
      try:
         lirchandle = pylirc.init("mpd-myfm", options.lircrc, 0)
      except RuntimeError:
         self.logger.debug('Could not connect to LIRC daemon, is it running?')
         options.lircenabled = False
         lirchandle = False
         sys.exit()
      try:
         if lirchandle:
            self.logger.info('LIRC thread started.')
         time.sleep(2)
         while options.lircenabled:
            # we do a time.sleep() here so the polling is done on an interval
            # otherwise it will drain all cpu power for polling, 100ms seems to result in a decent responsiveness.
            time.sleep(0.1)
            code = ''
            s = pylirc.nextcode()
            if(s):
               self.comlock.acquire()
               for code in s:
                  if code == 'albummode':
                     self.pushconfirmation()
                     self.logger.info('toggled album mode to %s.', self.toggleAlbum_mode)
                  elif code == 'volumeup':
                     self.client.volume(1)
                  elif code == 'volumedown':
                     self.client.volume(-1)
                  elif code == 'pause':
                     self.client.pause()
                  elif code == 'stop':
                     self.client.stop()
                  elif code == 'play':
                     self.client.play()
                  elif code == 'next':
                     self.client.next()
                  elif code == 'prev':
                     self.client.previous()
                  elif code == 'updatedb':
                     self.pushconfirmation()
                     self.logger.info('Started updating the Music Player Daemon library.')
                     i = self.client.update()
                     while 1:
                        try:
                           c = self.client.update()
                           if c > i:
                              self.logger.info('The Music Player Daemon library has been updated')
                              self.myfm.index.load(self.client.listallinfo())
                              break
                        except mpd.CommandError:
                           sleep(1, self.logger)
                     # TODO: Get notified when finished and reload library.
               self.comlock.release()
         else:
            self.exit()
      except (SystemExit, KeyboardInterrupt):
         self.exit()
      except:
         self.logger.error('An error has occurred in the LIRC thread, it is exiting now.')
         self.exit()

   def pushconfirmation(self): # {{{3
      if self.client.status().get('state') == 'play':
         self.client.pause()
         time.sleep(0.25)
         self.client.play()

   def exit(self): # {{{3
         self.logger.info('Stopping LIRC thread.')
         pylirc.exit()
         sys.exit()


def lircstart(options, client, myfm, comlock, logger): # {{{2
   try:
      # Check if the pylirc module is available in namespace.
      if pylirc and os.path.exists(os.path.expanduser(options.lircrc)):
         irrec = IRRec(client, options, myfm, comlock, logger)
         irrec.start()
      else :
         logger.warning('Could not find lircrc file: %s.', options.lircrc)
         logger.info('Will continue without LIRC support.')
         options.lircenabled = False
         irrec = False
   except NameError:
      logger.error('Could not load the pylirc module needed for LIRC support.')
      logger.info('Will continue without LIRC support.')
      options.lircenabled = False
      irrec = False # Set irrec to false to avoid variable not set errors.
   return irrec

def lirccheck(irrec, client, options, myfm, comlock, logger): # {{{2
   if(options.lircenabled and irrec.isAlive() == 0):
      irrec = IRRec(options, client, myfm, comlock, logger)
      logger.warning('The LIRC thread died, restarting it.')
      irrec.start()
   return irrec

# Miscellaneous functions. {{{1

def sleep(seconds, logger): # {{{2
   logger.log(5, 'Sleeping for %i seconds', seconds)
   time.sleep(seconds)

def createlog(options): # {{{2
   logger = logging.Logger()
   logger.setLevel(options.verbosity)
   if options.logfile: logger.setFile(options.logfile)
   logger.info('Started mpd-myfm client')
   return logger

def connect(client, hostname, portnr, passwd): # {{{2
   try:
      client.connect(host=hostname, port=portnr)
      if passwd: client.password(passwd)
      return True
   except socket.error:
      return False

def getLibraryInfo(client): # {{{2
   """
   Get the library from the mpd server.
   We substitute track numberings like '3/12' with '3'.
   """
   library = client.listallinfo()
   for track in library:
      if track.get('track', '') != '':
         match = re.match('^\d+', track['track'])
         track['track'] = int(match.group())
   return library

def cleanup(options, logger=None): # {{{2
   try:
      if options.pidfile and os.path.exists(options.pidfile):
         os.remove(options.pidfile)
   except:
      if logger:
         logger.error('Could not remove pidfile: %s', options.pidfile)

def getoptions(): # {{{2

   def setdefaults(): # {{{3
      # Define option defaults.
      defaults = {
            'hostname': '127.0.0.1',
            'portnr': 6600,
            'passwd': '',
            'songsleft': 3,
            'updatetime': 5,
            'reconnecttime': 60,
            'repeatfactor': 20,
            'albummode': False,
            'logfile': '',
            'daemonize': False,
            'verbosity': 0,
            'loglevel': 0,
            'lastfmaccount': '',
            'pidfile': '',
            'lircrc': '~/.lircrc',
            'lircenabled': False,
            'userconfig': '~/.mpd-myfm',
            'configfile': '/etc/mpd-myfm.conf',
            'modulepath': '/usr/local/lib/python%s/site-packages/mpd-myfm' % sys.version[:3],
            'effectiveuser': '',
            'effectivegroup': ''}

      return defaults

   def callback(option, opt_str, value, parshandle): # {{{3
      parseconfigfile(value, parser=parshandle)

   def parseconfigfile(configfile, defaults={}, parser=''): # {{{3
      if os.path.exists(configfile):
         handle = open(configfile, 'r')
         fileconfig = []
         fileconfig=(handle.read().split('\n'))
         handle.close()
         for line in fileconfig:
            if not re.match('^\s*(#.*)?$', line):
               line = re.sub('\s*', '', line)
               optkey, optarg = line.split('=')
               optkey = optkey.lower()
               if parser:
                  if optkey == 'hostname' or optkey == 'passwd' or optkey == 'lastfmaccount':
                     setattr(parser.values, optkey, optarg)
                  elif re.match('[0-9]', optarg):
                     setattr(parser.values, optkey, int(optarg))
                  else:
                     setattr(parser.values, optkey, optarg)
               else:
                  if optkey == 'hostname' or optkey == 'passwd' or optkey == 'lastfmaccount':
                     defaults[optkey]=optarg
                  elif re.match('[0-9]', optarg):
                     defaults[optkey]=int(optarg)
                  else:
                     defaults[optkey]=optarg
      return defaults

   # }}}

   class MyFmHelpFormatter (optparse.HelpFormatter): # {{{3
      """Format help with underlined section headers.
      """

      try:
         rows, columns = os.popen('stty size 2> /dev/null', 'r').read().split()
      except:
         columns = 80
      finally:
         columns = int(columns) - 5

      def __init__(self,
                   indent_increment=2,
                   max_help_position=35,
                   width=columns,
                   short_first=1):
         optparse.HelpFormatter.__init__ (
                  self, indent_increment, max_help_position, width, short_first, )

      def format_usage(self, usage):
         return self.format_heading(optparse._("Usage:  %s" % usage ))

      def format_heading(self, heading):
         return "%s\n%s\n" % (heading, "=-"[self.level] * len(heading) )

      # }}}

   # Parse config files, first system wide then the userconfig to override options set in both.
   defaults = setdefaults()
   if os.path.exists('/etc/mpd-myfm.conf'):
      defaults = parseconfigfile('/etc/mpd-myfm.conf', defaults)
   if os.path.exists(os.path.expanduser(defaults['userconfig'])) and os.getuid() != 0:
      defaults = parseconfigfile(os.path.expanduser(defaults['userconfig']), defaults)

   # Parse command line, this will override the config file settings.
   # If a config file is set via the command line the options defined in that config file will
   # be inserted at that point in the command line overriding any options given earlier on the commandline
   # that also exist in the specified config file.
   parser = optparse.OptionParser(formatter=MyFmHelpFormatter())
   parser.add_option('-c', '--configfile', help='Specify which configuration file to use (best given as first option).', metavar='FILE', type='str', action='callback', callback=callback)
   parser.add_option('-H', '--host', dest='hostname', help='host name of Music Player Daemon', metavar='HOST', default=defaults['hostname'])
   parser.add_option('-p', '--port', dest='portnr', help='port number on which MPD is listening', metavar='PORT', type='int', default=defaults['portnr'])
   parser.add_option('-P', '--pass', dest='passwd', help='password for connecting with MPD', metavar='PASS', default=defaults['passwd'])
   parser.add_option('-r', '--reconnect', dest='reconnecttime', help='seconds before client tries to reconnect', metavar='SEC', type='int', default=defaults['reconnecttime'])
   parser.add_option('-u', '--update', dest='updatetime', help='seconds between updates to the playlist', metavar='SEC', type='int', default=defaults['updatetime'])
   parser.add_option('-s', '--songs', dest='songsleft', help='number of tracks before end of playlist to start adding songs', metavar='NUM', type='int', default=defaults['songsleft'])
   parser.add_option('-R', '--repeat', dest='repeatfactor', help='number of last played tracks not to repeat', metavar='NUM', type='int', default=defaults['repeatfactor'])
   parser.add_option('-l', '--lastfm', dest='lastfmaccount', help="play tracks loved by user on Last.fm more frequently and don't play banned tracks", metavar='USERNAME', default=defaults['lastfmaccount'])
   parser.add_option('-A', '--album', dest='albummode', help='add whole albums instead of just one track.', action='store_true', default=defaults['albummode'])
   parser.add_option('-L', '--logfile', dest='logfile', help='Copy script output to file.', metavar='FILE', default=defaults['logfile'])
   parser.add_option('-i', '--lirc', dest='lircenabled', help='Enable support for lirc remote controll', action='store_true', default=defaults['lircenabled'])
   parser.add_option('-I', '--lircrc', dest='lircrc', help='Lirc keymapping file to use.', metavar='FILE', default=defaults['lircrc'])
   parser.add_option('-M', '--modulepath', dest='modulepath', help='Directory where the modules that came with mpd-myfm are stored.', metavar='/PATH/TO/', default=defaults['modulepath'])
   parser.add_option('-D', '--daemonize', dest='daemonize', help='Detatch from consolle.', action='store_true', default=defaults['daemonize'])
   parser.add_option('-F', '--pidfile', dest='pidfile', help='process identifier file to use.', metavar='FILE', default=defaults['pidfile'])
   parser.add_option('--userid', dest='effectiveuser', help='Name of the useraccount to run as if daemonized.', metavar='USERNAME', default=defaults['effectiveuser'])
   parser.add_option('--groupid', dest='effectivegroup', help='Name of the group to run in if daemonized.', metavar='GROUPNAME', default=defaults['effectivegroup'])
   parser.add_option('-v', '--verbose', dest='verbosity', help='Make more noise', action='count', default=defaults['verbosity'])
   parser.add_option('--loglevel', dest='loglevel', help='Set the amount of messages that get logged in the logfile. (1-10)', type='int', metavar='NUM', default=defaults['loglevel'])
   (options, args) = parser.parse_args()

   return options, parser

# }}}1

if __name__ == '__main__':
   options, parser = getoptions()
   sys.path.append(options.modulepath)
   # Import modules needed for optional functionality here.
   # This makes loading optional and errors won't stop us from running.
   # We check if loading was successful later when logging is available.
   try:
      if options.lircenabled:
         try:
            import pylirc
         except ImportError, error:
            pass
      if options.daemonize:
         import daemon
         try:
            with daemon.DaemonContext():
               main(options, parser)
         except daemon.daemon.DaemonError, error:
            print 'Could not Daemonize:', error
            if options.verbosity >= 2: raise
            else : raise RuntimeError
      else:
         main(options, parser)
   except RuntimeError:
      cleanup(options)
      sys.exit(1)
   except (SystemExit, KeyboardInterrupt):
      cleanup(options)
      sys.exit(0)
   except ImportError, module:
      cleanup(options)
      print 'An error has occurred during the importing of modules: %s.' % module

# vim: et ts=3 sw=3 fdm=marker
